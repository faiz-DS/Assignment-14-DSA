class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def detect_and_remove_loop(head):
    # Step 1: Detect loop using Floyd's Cycle Detection Algorithm
    slow = fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            break

    # If no loop is found, return False
    if not fast or not fast.next:
        return False

    # Step 2: Find the start of the loop (meeting point of slow and fast pointers)
    slow = head
    while slow != fast:
        slow = slow.next
        fast = fast.next

    # Step 3: Find the node before the start of the loop
    while fast.next != slow:
        fast = fast.next

    # Step 4: Remove the loop by setting the next pointer of the node before the loop start to None
    fast.next = None

    return True

# Helper function to create a linked list from a list of values
def create_linked_list(values):
    head = None
    tail = None
    for val in values:
        new_node = ListNode(val)
        if not head:
            head = new_node
            tail = new_node
        else:
            tail.next = new_node
            tail = new_node
    return head

# Helper function to print linked list elements for verification
def print_linked_list(head):
    curr = head
    while curr:
        print(curr.val, end=" -> ")
        curr = curr.next
    print("None")

# Test Cases
if __name__ == "__main__":
    # Example 1
    values1 = [1, 3, 4]
    head1 = create_linked_list(values1)
    head1.next.next.next = head1.next  # Creating a loop at position X=2
    print("Example 1 Before:")
    print_linked_list(head1)
    detect_and_remove_loop(head1)
    print("Example 1 After:")
    print_linked_list(head1)

    # Example 2
    values2 = [1, 8, 3, 4]
    head2 = create_linked_list(values2)
    print("Example 2 Before:")
    print_linked_list(head2)
    detect_and_remove_loop(head2)
    print("Example 2 After:")
    print_linked_list(head2)

    # Example 3
    values3 = [1, 2, 3, 4]
    head3 = create_linked_list(values3)
    head3.next.next.next.next = head3.next  # Creating a loop at position X=1
    print("Example 3 Before:")
    print_linked_list(head3)
    detect_and_remove_loop(head3)
    print("Example 3 After:")
    print_linked_list(head3)
