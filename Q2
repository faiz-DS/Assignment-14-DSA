class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def add_one_to_linked_list(head):
    # Step 1: Find the least significant non-9 digit
    curr = head
    last_non_9 = None
    while curr:
        if curr.val != 9:
            last_non_9 = curr
        curr = curr.next

    # Step 2: Add 1 to the least significant non-9 digit or the first digit if there is no non-9 digit
    if last_non_9 is None:
        new_node = ListNode(1)
        new_node.next = head
        head = new_node
    else:
        last_non_9.val += 1

    # Step 3: Propagate carry if needed
    curr = last_non_9.next
    while curr:
        curr.val = 0
        curr = curr.next

    return head

# Helper function to create a linked list from a list of values
def create_linked_list(values):
    head = None
    tail = None
    for val in values:
        new_node = ListNode(val)
        if not head:
            head = new_node
            tail = new_node
        else:
            tail.next = new_node
            tail = new_node
    return head

# Helper function to convert the linked list to a number for verification
def linked_list_to_number(head):
    num = 0
    while head:
        num = num * 10 + head.val
        head = head.next
    return num

# Test Cases
if __name__ == "__main__":
    # Example 1
    values1 = [4, 5, 6]
    head1 = create_linked_list(values1)
    print("Example 1 Before:", linked_list_to_number(head1))
    head1 = add_one_to_linked_list(head1)
    print("Example 1 After:", linked_list_to_number(head1))

    # Example 2
    values2 = [1, 2, 3]
    head2 = create_linked_list(values2)
    print("Example 2 Before:", linked_list_to_number(head2))
    head2 = add_one_to_linked_list(head2)
    print("Example 2 After:", linked_list_to_number(head2))
